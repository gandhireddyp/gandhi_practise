package corejava.euler.problems;

import java.util.Date;

/**
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * 
 * @author gandhip
 * 
 */
public class Problem_012_HighlyDivisibleTriangularNumber {

	public static void main(String[] args) {
		long startDate = new Date().getTime();

		System.out.println(getTriangularNumberWith_N_Factors(500));
		long endDate = new Date().getTime();
		System.out.println("Time taken " + (endDate - startDate));
	}

	public static long getTriangularNumberWith_N_Factors(int n) {

		for (long i = 1;; i++) {
			long sumOf_N_Elements = getSumOf_N_Terms(i);
			int numberOfFactors = numberOfFactors(sumOf_N_Elements);
			if (numberOfFactors >= n) {
				System.out.println("Number of Factors for " + sumOf_N_Elements
						+ " Is " + numberOfFactors
						+ ". Which is the sum of first " + i + " elements");
				return sumOf_N_Elements;
			}
		}
	}

	public static int numberOfFactors(long n) {
		int numberOfFactors = 2;// 1 and the number itself is taken as factor
		for (long i = 2; i <= n / 2; i++) {
			if (n % i == 0)
				numberOfFactors++;
		}
		return numberOfFactors;
	}

	public static long getSumOf_N_Terms(long n) {
		return (n * (n + 1)) / 2;
	}
}
